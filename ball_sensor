const int NUM_SENSORS = 8;  
const int IR_PINS[NUM_SENSORS] = {2, 3, 4, 5, 6, 7, 8, 9}; 

void setup() {
  Serial.begin(9600);
  for (int i = 0; i < NUM_SENSORS; ++i) {
    pinMode(IR_PINS[i], INPUT);
  }
}

void loop() {
  float minDutyCycle = 100.0;  
  int minSensorIndex = -1; 
  int sensorVector[NUM_SENSORS] = {0}; 

    // Calcula o sinal
  for (int i = 0; i < NUM_SENSORS; ++i) {
    unsigned long duration = pulseIn(IR_PINS[i], HIGH, 820); 


    if (duration > 0) {
      float dutyCycle = (duration / 1000.0) * 100.0; // Calcula o duty cycle em porcentagem
      Serial.print("Sensor ");
      Serial.print(i); // Identifica o número do sensor
      Serial.print(": ");
      Serial.print(dutyCycle); 
      Serial.print("%, ");

      // Verifica se o duty cycle é o menor
      if (dutyCycle < minDutyCycle) {
        minDutyCycle = dutyCycle;
        minSensorIndex = i;
      }
    } else {
      Serial.print("Sensor ");
      Serial.print(i);
      Serial.print(": Não detectado, ");
    }
  }

  // Se um sensor válido foi encontrado, atualiza o vetor
  if (minSensorIndex != -1) {
    sensorVector[minSensorIndex] = 1; // Define o menor sensor como 1

    // Exibe o vetor resultante
    Serial.print("\nVetor de sensores: ");
    for (int i = 0; i < NUM_SENSORS; ++i) {
      Serial.print(sensorVector[i]);
      Serial.print(" ");
    }
    Serial.print("\nSensor com menor duty cycle: Sensor ");
    Serial.print(minSensorIndex);
    Serial.print(" com ");
    Serial.print(minDutyCycle);
    Serial.println("%");
  } else {
    Serial.println("\nNenhum sensor detectado.");
  }

  Serial.println(); // Quebra de linha após cada ciclo de aferição dos sensores
  delay(600);
}
