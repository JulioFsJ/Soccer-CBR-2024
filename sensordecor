#include <Wire.h>
#include "Adafruit_TCS34725.h" // Inclua a biblioteca do TCS34725

#define PCA9548A_ADDRESS 0x70 // Endereço I2C do PCA9548A

// Crie um array para os sensores
Adafruit_TCS34725 tcs[4] = {
  Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X),
  Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X),
  Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X),
  Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X)
};

void setup() {
  Serial.begin(9600); // Inicia a comunicação Serial
  Wire.begin(); // Inicia a comunicação I2C

  // Inicializa os sensores
  for (int i = 0; i < 4; i++) {
    selectChannel(i); // Seleciona o canal correspondente
    if (tcs[i].begin()) {
      Serial.print("Sensor TCS34725 no canal ");
      Serial.println(i);
    } else {
      Serial.print("Falha ao encontrar o sensor no canal ");
      Serial.println(i);
    }
  }
}

void loop() {
  for (int i = 0; i < 4; i++) {
    selectChannel(i); // Seleciona o canal correspondente
    readSensorData(i); // Lê os dados do sensor
  }
  delay(1000); // Delay para evitar leituras muito rápidas
}

// Função para selecionar um canal do PCA9548A
void selectChannel(uint8_t channel) {
  if (channel > 7) return; // Canal inválido
  Wire.beginTransmission(PCA9548A_ADDRESS);
  Wire.write(1 << channel); // Ativa apenas o canal desejado
  Wire.endTransmission();
}

// Função para ler dados do sensor TCS34725
void readSensorData(int sensorIndex) {
  uint16_t r, g, b, c;
  tcs[sensorIndex].getRawData(&r, &g, &b, &c); // Obtém os dados RGB e Clear

  Serial.print("Sensor ");
  Serial.print(sensorIndex);
  Serial.print(": R = ");
  Serial.print(r);
  Serial.print(", G = ");
  Serial.print(g);
  Serial.print(", B = ");
  Serial.print(b);
  Serial.print(", C = ");
  Serial.println(c);

  // Identifica se a cor é branca
  if (isWhite(r, g, b, c)) {
    Serial.println("Cor detectada: Branca");
  } else {
    Serial.println("Cor detectada: Não branca");
  }
}

// Função para determinar se a cor é branca
bool isWhite(uint16_t r, uint16_t g, uint16_t b, uint16_t c) {
  // Defina um limiar de intensidade total
  uint16_t threshold = 200; // Ajuste este valor conforme necessário
  uint16_t total = r + g + b;

  // Verifica se a intensidade total é suficientemente alta e os canais estão equilibrados
  return (total > threshold) && 
         (r > threshold * 0.5) && 
         (g > threshold * 0.5) && 
         (b > threshold * 0.5);
}
